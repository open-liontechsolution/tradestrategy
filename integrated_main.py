#!/usr/bin/env python3
"""
Script principal integrado para el sistema de an√°lisis de trading mejorado
Incluye todas las funcionalidades del sistema actualizado
"""

import sys
import os
from datetime import datetime
from typing import Optional

# Importar nuestros m√≥dulos
from stock_analyzer import StockAnalyzer
from data_loader import DataLoader
from config import get_all_symbols, MARKET_STOCKS, SECTOR_STOCKS, STOCK_DATA_SUMMARY

def show_system_info():
    """Mostrar informaci√≥n del sistema"""
    print("="*60)
    print("üöÄ SISTEMA DE AN√ÅLISIS DE TRADING MEJORADO")
    print("="*60)
    print(f"üìä Total de acciones disponibles: {STOCK_DATA_SUMMARY['total_stocks']}")
    print(f"üåç Mercados: {', '.join(STOCK_DATA_SUMMARY['markets'])}")
    print(f"üè∑Ô∏è  Sectores: {len(STOCK_DATA_SUMMARY['sectors'])}")
    
    print("\nüìà Acciones por mercado:")
    for market, count in STOCK_DATA_SUMMARY['by_market'].items():
        print(f"  {market}: {count} acciones")
    
    print("\nüè∑Ô∏è Acciones por sector (principales):")
    for sector, count in STOCK_DATA_SUMMARY['by_sector'].items():
        if count > 20:  # Solo mostrar sectores grandes
            print(f"  {sector}: {count} acciones")
    
    print("="*60)

def analyze_stock_example():
    """Ejecutar an√°lisis de ejemplo con una acci√≥n"""
    print("\nüîç EJEMPLO: An√°lisis de AAPL")
    print("-" * 40)
    
    analyzer = StockAnalyzer()
    
    try:
        # Analizar AAPL
        analyzer.fetch_stock_data('AAPL', period='1y', interval='1wk')
        
        # Mostrar estad√≠sticas b√°sicas
        stats = analyzer.get_basic_stats()
        print(f"üìä Estad√≠sticas b√°sicas de AAPL:")
        for key, value in stats.items():
            if isinstance(value, float):
                print(f"  {key}: {value:.2f}")
            else:
                print(f"  {key}: {value}")
        
        # Crear gr√°fico
        analyzer.plot_price_and_volume(save_plot=True, filename='integrated_example_aapl.png')
        print(f"üìà Gr√°fico guardado: integrated_example_aapl.png")
        
        print("‚úÖ An√°lisis de ejemplo completado")
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis de ejemplo: {e}")

def load_historical_data_menu():
    """Men√∫ para cargar datos hist√≥ricos"""
    loader = DataLoader()
    
    # Mostrar configuraci√≥n actual del filtro
    print(f"\n‚öôÔ∏è CONFIGURACI√ìN DE FILTRADO ACTUAL:")
    print(f"üìÖ A√±os m√≠nimos: {loader.min_years} (Variable: MIN_STOCK_YEARS={os.getenv('MIN_STOCK_YEARS', 'No definida')})")
    print(f"üìä Fecha m√≠nima: {loader.min_date.strftime('%Y-%m-%d')}")
    
    print("\nüìä OPCIONES DE CARGA DE DATOS HIST√ìRICOS:")
    print("1. Carga b√°sica (primeras 20 acciones, per√≠odo 1 a√±o)")
    print("2. Carga completa CON filtro (644 acciones disponibles, 5+ a√±os m√≠nimo)")
    print("3. Carga completa SIN filtro (TODAS las 644 acciones, sin restricci√≥n)")
    print("4. Carga personalizada (configuraci√≥n manual)")
    print("5. Configuraci√≥n personalizada")
    print("0. Volver al men√∫ principal")
    
    choice = input("\nSelecciona una opci√≥n: ").strip()
    
    if choice == "1":
        print("üß™ Cargando datos de prueba con filtrado...")
        data_dict, combined_file = loader.load_all_historical_data(
            period="max", interval="1wk", max_stocks=20, filter_by_years=True
        )
    elif choice == "2":
        print("üöÄ Cargando TODAS las acciones con filtrado de 5+ a√±os...")
        print("‚è≥ Esto puede tomar varios minutos. Progreso se mostrar√° en tiempo real.")
        data_dict, combined_file = loader.load_all_historical_data(
            period="max", interval="1wk", max_stocks=None, filter_by_years=True
        )
    elif choice == "3":
        print("‚ö†Ô∏è  Cargando TODAS las 644 acciones SIN filtro de a√±os...")
        print("‚ö†Ô∏è  Esto incluir√° acciones con menos de {} a√±os de historia".format(loader.min_years))
        print("‚è≥ Proceso muy largo. Se recomienda usar opci√≥n 2 con filtrado.")
        confirm = input("¬øContinuar? (s/N): ").strip().lower()
        if confirm == 's':
            data_dict, combined_file = loader.load_all_historical_data(
                period="max", interval="1wk", max_stocks=None, filter_by_years=False
            )
        else:
            print("‚ùå Operaci√≥n cancelada")
            return
    elif choice == "4":
        print("\nüîß CONFIGURACI√ìN PERSONALIZADA:")
        period = input("Per√≠odo (1y/2y/5y/max) [max]: ").strip() or "max"
        interval = input("Intervalo (1d/1wk/1mo) [1wk]: ").strip() or "1wk"
        max_stocks_input = input("M√°ximo acciones (Enter=todas): ").strip()
        max_stocks = int(max_stocks_input) if max_stocks_input.isdigit() else None
        filter_input = input("Aplicar filtro de a√±os? (s/N) [s]: ").strip().lower()
        filter_by_years = filter_input != 'n'
        
        print(f"\nüìà Configuraci√≥n: per√≠odo={period}, intervalo={interval}")
        print(f"üìÄ Acciones: {'Todas (644)' if max_stocks is None else max_stocks}")
        print(f"üìÖ Filtro: {'Activado (' + str(loader.min_years) + '+ a√±os)' if filter_by_years else 'Desactivado'}")
        
        confirm = input("¬øContinuar? (s/N): ").strip().lower()
        if confirm == 's':
            data_dict, combined_file = loader.load_all_historical_data(
                period=period, interval=interval, max_stocks=max_stocks, filter_by_years=filter_by_years
            )
        else:
            print("‚ùå Operaci√≥n cancelada")
            return
    elif choice == "5":
        # Configuraci√≥n del filtro
        print("\n‚öôÔ∏è CONFIGURACI√ìN DEL FILTRO:")
        print(f"Actual: {loader.min_years} a√±os m√≠nimo")
        new_years = input("Nuevo valor (Enter=mantener actual): ").strip()
        if new_years.isdigit():
            import os
            os.environ['MIN_STOCK_YEARS'] = new_years
            print(f"‚úÖ Filtro actualizado: {new_years} a√±os m√≠nimo")
        else:
            print("üìå Filtro mantenido")
        return
    elif choice == "0":
        return
    else:
        print("‚ùå Opci√≥n no v√°lida")
        return
    
    if data_dict:
        print(f"\n‚úÖ Carga completada: {len(data_dict)} acciones")
        print(f"üìÑ Archivo combinado: {combined_file}")

def analyze_market_sector():
    """Analizar acciones por mercado o sector"""
    print("\nüìä AN√ÅLISIS POR MERCADO/SECTOR")
    print("-" * 40)
    print("1. Analizar por mercado")
    print("2. Analizar por sector")
    print("0. Volver al men√∫ principal")
    
    choice = input("\nSelecciona una opci√≥n: ").strip()
    
    if choice == "1":
        print("\nüåç Mercados disponibles:")
        for i, market in enumerate(MARKET_STOCKS.keys(), 1):
            count = len(MARKET_STOCKS[market])
            print(f"  {i}. {market.upper()} ({count} acciones)")
        
        try:
            market_idx = int(input("\nSelecciona mercado: ")) - 1
            market_name = list(MARKET_STOCKS.keys())[market_idx]
            symbols = MARKET_STOCKS[market_name][:10]  # Limitar a 10 para ejemplo
            
            print(f"\nüîç Analizando primeras 10 acciones de {market_name.upper()}:")
            analyzer = StockAnalyzer()
            
            for symbol in symbols:
                try:
                    analyzer.fetch_stock_data(symbol, period='3mo', interval='1wk')
                    stats = analyzer.get_basic_stats()
                    print(f"  {symbol}: Precio actual: ${stats['current_price']:.2f}, Retorno: {stats['total_return']:.1f}%")
                except Exception as e:
                    print(f"  {symbol}: Error - {e}")
                    
        except (ValueError, IndexError):
            print("‚ùå Selecci√≥n inv√°lida")
    
    elif choice == "2":
        print("\nüè∑Ô∏è Sectores disponibles:")
        for i, (sector, symbols) in enumerate(SECTOR_STOCKS.items(), 1):
            if len(symbols) > 10:  # Solo mostrar sectores grandes
                print(f"  {i}. {sector.title()} ({len(symbols)} acciones)")
        
        sector_name = input("\nIngresa nombre del sector: ").strip().lower()
        
        if sector_name in SECTOR_STOCKS:
            symbols = SECTOR_STOCKS[sector_name][:10]  # Limitar a 10 para ejemplo
            
            print(f"\nüîç Analizando primeras 10 acciones de {sector_name.title()}:")
            analyzer = StockAnalyzer()
            
            for symbol in symbols:
                try:
                    analyzer.fetch_stock_data(symbol, period='3mo', interval='1wk')
                    stats = analyzer.get_basic_stats()
                    print(f"  {symbol}: Precio actual: ${stats['current_price']:.2f}, Retorno: {stats['total_return']:.1f}%")
                except Exception as e:
                    print(f"  {symbol}: Error - {e}")
        else:
            print("‚ùå Sector no encontrado")
    
    elif choice == "0":
        return
    else:
        print("‚ùå Opci√≥n inv√°lida")

def main_menu():
    """Men√∫ principal del sistema"""
    while True:
        print("\n" + "="*60)
        print("üöÄ SISTEMA DE AN√ÅLISIS DE TRADING MEJORADO")
        print("="*60)
        print("1. Mostrar informaci√≥n del sistema")
        print("2. Ejecutar an√°lisis de ejemplo (AAPL)")
        print("3. Cargar datos hist√≥ricos")
        print("4. Analizar por mercado/sector")
        print("5. An√°lisis personalizado de una acci√≥n")
        print("6. Comparar m√∫ltiples acciones")
        print("0. Salir")
        
        choice = input("\nSelecciona una opci√≥n: ").strip()
        
        if choice == "1":
            show_system_info()
        elif choice == "2":
            analyze_stock_example()
        elif choice == "3":
            load_historical_data_menu()
        elif choice == "4":
            analyze_market_sector()
        elif choice == "5":
            symbol = input("\nIngresa el s√≠mbolo de la acci√≥n: ").strip().upper()
            if symbol:
                try:
                    analyzer = StockAnalyzer()
                    analyzer.fetch_stock_data(symbol, period='1y', interval='1wk')
                    
                    # An√°lisis completo
                    stats = analyzer.get_basic_stats()
                    print(f"\nüìä An√°lisis de {symbol}:")
                    for key, value in stats.items():
                        if isinstance(value, float):
                            print(f"  {key}: {value:.2f}")
                        else:
                            print(f"  {key}: {value}")
                    
                    # Crear gr√°fico
                    filename = f"analysis_{symbol.lower()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                    analyzer.plot_price_and_volume(save_plot=True, filename=filename)
                    print(f"üìà Gr√°fico guardado: {filename}")
                    
                except Exception as e:
                    print(f"‚ùå Error analizando {symbol}: {e}")
        elif choice == "6":
            symbols_input = input("\nIngresa s√≠mbolos separados por comas: ").strip()
            if symbols_input:
                symbols = [s.strip().upper() for s in symbols_input.split(',')]
                try:
                    analyzer = StockAnalyzer()
                    comparison_data = {}
                    
                    for symbol in symbols:
                        analyzer.fetch_stock_data(symbol, period='1y', interval='1wk')
                        comparison_data[symbol] = analyzer.data.copy()
                    
                    # Crear gr√°fico de comparaci√≥n
                    filename = f"comparison_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                    analyzer.compare_stocks(list(comparison_data.keys()), save_plot=True, filename=filename)
                    print(f"üìà Gr√°fico de comparaci√≥n guardado: {filename}")
                    
                except Exception as e:
                    print(f"‚ùå Error en comparaci√≥n: {e}")
        elif choice == "0":
            print("\nüëã ¬°Hasta luego!")
            break
        else:
            print("‚ùå Opci√≥n inv√°lida")

def main():
    """Funci√≥n principal"""
    print("üîß Inicializando sistema...")
    
    # Verificar que tenemos datos
    try:
        total_symbols = len(get_all_symbols())
        if total_symbols == 0:
            print("‚ö†Ô∏è  No hay datos de acciones disponibles")
            print("üîÑ Ejecuta primero 'improved_stock_fetcher.py' para obtener las acciones")
            return
        
        print(f"‚úÖ Sistema listo con {total_symbols} acciones disponibles")
        main_menu()
        
    except Exception as e:
        print(f"‚ùå Error inicializando sistema: {e}")

if __name__ == "__main__":
    main()
