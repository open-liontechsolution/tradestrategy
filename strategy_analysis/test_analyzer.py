#!/usr/bin/env python3
"""
Test script para verificar la funcionalidad b√°sica del Breakout Analyzer
"""

import sys
from pathlib import Path

# A√±adir el directorio actual al path para importar el m√≥dulo
sys.path.append(str(Path(__file__).parent))

from breakout_analyzer import BreakoutAnalyzer

def test_database_connection():
    """Prueba la conexi√≥n a la base de datos."""
    print("Probando conexi√≥n a la base de datos...")
    analyzer = BreakoutAnalyzer()
    
    if analyzer.connect_to_database():
        print("‚úì Conexi√≥n exitosa")
        return True
    else:
        print("‚úó Error de conexi√≥n")
        return False

def test_symbol_retrieval():
    """Prueba la obtenci√≥n de s√≠mbolos."""
    print("Probando obtenci√≥n de s√≠mbolos...")
    analyzer = BreakoutAnalyzer()
    
    if not analyzer.connect_to_database():
        print("‚úó No se pudo conectar a la base de datos")
        return False
    
    symbols = analyzer.get_all_symbols()
    if symbols:
        print(f"‚úì Se encontraron {len(symbols)} s√≠mbolos")
        print(f"Primeros 5 s√≠mbolos: {symbols[:5]}")
        return True
    else:
        print("‚úó No se encontraron s√≠mbolos")
        return False

def test_table_creation():
    """Prueba la creaci√≥n de la tabla de candidatos."""
    print("Probando creaci√≥n de tabla...")
    analyzer = BreakoutAnalyzer()
    
    if not analyzer.connect_to_database():
        print("‚úó No se pudo conectar a la base de datos")
        return False
    
    try:
        analyzer.create_strategy_table()
        print("‚úì Tabla strategy_candidates creada/verificada")
        return True
    except Exception as e:
        print(f"‚úó Error creando tabla: {e}")
        return False

def test_single_symbol_analysis():
    """Prueba el an√°lisis de un s√≠mbolo espec√≠fico."""
    print("Probando an√°lisis de s√≠mbolo individual...")
    analyzer = BreakoutAnalyzer()
    
    if not analyzer.connect_to_database():
        print("‚úó No se pudo conectar a la base de datos")
        return False
    
    # Obtener un s√≠mbolo para probar
    symbols = analyzer.get_all_symbols()
    if not symbols:
        print("‚úó No hay s√≠mbolos para probar")
        return False
    
    test_symbol = symbols[0]  # Usar el primer s√≠mbolo
    print(f"Probando con s√≠mbolo: {test_symbol}")
    
    # Obtener datos del s√≠mbolo
    df = analyzer.get_symbol_data(test_symbol)
    if df is None or df.empty:
        print(f"‚úó No se pudieron obtener datos para {test_symbol}")
        return False
    
    print(f"‚úì Datos obtenidos: {len(df)} registros desde {df['date'].min()} hasta {df['date'].max()}")
    
    # Analizar patr√≥n
    analysis_result = analyzer.analyze_symbol_pattern(test_symbol, df)
    if analysis_result:
        print(f"‚úì An√°lisis completado para {test_symbol}")
        print(f"  - A√±os de datos: {analysis_result['years_of_data']:.2f}")
        print(f"  - M√°ximo hist√≥rico: ${analysis_result['historical_high']:.2f}")
        print(f"  - Precio actual: ${analysis_result['current_price']:.2f}")
        print(f"  - Distancia a resistencia: {analysis_result['resistance_distance_percent']:.2f}%")
        print(f"  - Es candidato v√°lido: {analysis_result['is_valid_candidate']}")
        return True
    else:
        print(f"‚úó No se pudo analizar el patr√≥n para {test_symbol}")
        return False

def main():
    """Ejecuta todas las pruebas."""
    print("="*60)
    print("PRUEBAS DEL BREAKOUT ANALYZER")
    print("="*60)
    
    tests = [
        ("Conexi√≥n a base de datos", test_database_connection),
        ("Obtenci√≥n de s√≠mbolos", test_symbol_retrieval),
        ("Creaci√≥n de tabla", test_table_creation),
        ("An√°lisis de s√≠mbolo", test_single_symbol_analysis),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{test_name}:")
        print("-" * 40)
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚úó Error inesperado: {e}")
    
    print("\n" + "="*60)
    print(f"RESULTADO: {passed}/{total} pruebas pasaron")
    print("="*60)
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! El analyzer est√° listo para usar.")
        return True
    else:
        print("‚ùå Algunas pruebas fallaron. Revisa la configuraci√≥n.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
